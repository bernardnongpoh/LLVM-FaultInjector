; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@loadCounter = global i32 0, align 4
@storeCounter = global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"injectErrorCall\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"----------Statistics----------\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c" # Load = %d \0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c" # STORE = %d \0A\00", align 1
@image1 = global [4096 x [4096 x i8]] zeroinitializer, align 16, !dbg !0
@image2 = global [4096 x [4096 x i8]] zeroinitializer, align 16, !dbg !9
@x_size1 = global i32 0, align 4, !dbg !15
@y_size1 = global i32 0, align 4, !dbg !17
@x_size2 = global i32 0, align 4, !dbg !19
@y_size2 = global i32 0, align 4, !dbg !21
@.str.5 = private unnamed_addr constant [56 x i8] c"\0A-----------------------------------------------------\0A\00", align 1
@.str.1.6 = private unnamed_addr constant [41 x i8] c"Monochromatic image file input routine \0A\00", align 1
@.str.2.7 = private unnamed_addr constant [56 x i8] c"-----------------------------------------------------\0A\0A\00", align 1
@.str.3.8 = private unnamed_addr constant [42 x i8] c"     Only pgm binary file is acceptable\0A\0A\00", align 1
@.str.4.9 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.5.10 = private unnamed_addr constant [31 x i8] c"     The file doesn't exist!\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"     Mistaken file format, not P5!\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"\0A     Image width = %d, Image height = %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"     Maximum gray level = %d\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [34 x i8] c"     Image size exceeds %d x %d\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"     Please use smaller images!\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [44 x i8] c"     Invalid value of maximum gray level!\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"-----Image data input OK-----\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"out.pgm\00", align 1
@.str.16 = private unnamed_addr constant [55 x i8] c"-----------------------------------------------------\0A\00", align 1
@.str.17 = private unnamed_addr constant [41 x i8] c"Monochromatic image file output routine\0A\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"P5\0A\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"# Created by Image Processing\0A\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"\0A-----Image data output OK-----\0A\0A\00", align 1
@.str.24 = private unnamed_addr constant [45 x i8] c"Now, filtering of input image is performed\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [20 x i8] c"Nothing exists!!!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z5randrjj(i32 %min, i32 %max) #0 {
entry:
  %min.addr = alloca i32, align 4
  %max.addr = alloca i32, align 4
  %scaled = alloca double, align 8
  store i32 %min, i32* %min.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  %call = call i32 @rand() #8
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  store double %div, double* %scaled, align 8
  %0 = load i32, i32* %max.addr, align 4
  %1 = load i32, i32* %min.addr, align 4
  %sub = sub i32 %0, %1
  %add = add i32 %sub, 1
  %conv1 = uitofp i32 %add to double
  %2 = load double, double* %scaled, align 8
  %mul = fmul double %conv1, %2
  %3 = load i32, i32* %min.addr, align 4
  %conv2 = uitofp i32 %3 to double
  %add3 = fadd double %mul, %conv2
  %conv4 = fptoui double %add3 to i32
  ret i32 %conv4
}

; Function Attrs: nounwind
declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z8flipBitsii(i32 %number, i32 %numberOfBits) #0 {
entry:
  %number.addr = alloca i32, align 4
  %numberOfBits.addr = alloca i32, align 4
  %randomBit = alloca i32, align 4
  store i32 %number, i32* %number.addr, align 4
  store i32 %numberOfBits, i32* %numberOfBits.addr, align 4
  %call = call i32 @_Z5randrjj(i32 0, i32 32)
  store i32 %call, i32* %randomBit, align 4
  %0 = load i32, i32* %randomBit, align 4
  %shl = shl i32 1, %0
  %1 = load i32, i32* %number.addr, align 4
  %xor = xor i32 %1, %shl
  store i32 %xor, i32* %number.addr, align 4
  %2 = load i32, i32* %number.addr, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define void @_Z4LOADv() #0 {
entry:
  %0 = load i32, i32* @loadCounter, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @loadCounter, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @_Z5STOREv() #0 {
entry:
  %0 = load i32, i32* @storeCounter, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @storeCounter, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z20injectError32IntDataPi(i32* %a) #0 {
entry:
  %a.addr = alloca i32*, align 8
  store i32* %a, i32** %a.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  %1 = load i32, i32* %0, align 4
  %call = call i32 @_Z8flipBitsii(i32 %1, i32 2)
  %2 = load i32*, i32** %a.addr, align 8
  store i32 %call, i32* %2, align 4
  %3 = load i32*, i32** %a.addr, align 8
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: noinline optnone uwtable
define i32 @_Z16injectErrorStorej(i32 %a) #2 {
entry:
  %a.addr = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  %0 = load i32, i32* %a.addr, align 4
  %call1 = call i32 @_Z8flipBitsii(i32 %0, i32 1)
  store i32 %call1, i32* %res, align 4
  %1 = load i32, i32* %res, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %res, align 4
  ret i32 %2
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: noinline optnone uwtable
define void @_Z5PRINTv() #2 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i32 0, i32 0))
  %0 = load i32, i32* @loadCounter, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @storeCounter, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i32 0, i32 0), i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @_Z5SRANDv() #0 {
entry:
  %call = call i64 @time(i64* null) #8
  %conv = trunc i64 %call to i32
  call void @srand(i32 %conv) #8
  ret void
}

; Function Attrs: nounwind
declare i64 @time(i64*) #1

; Function Attrs: nounwind
declare void @srand(i32) #1

; Function Attrs: noinline optnone uwtable
define void @_Z15load_image_dataPKc(i8* %file_name) #2 !dbg !27 {
entry:
  %file_name.addr = alloca i8*, align 8
  %buffer = alloca [256 x i8], align 16
  %fp = alloca %struct._IO_FILE*, align 8
  %max_gray = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %file_name, i8** %file_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file_name.addr, metadata !33, metadata !34), !dbg !35
  call void @llvm.dbg.declare(metadata [256 x i8]* %buffer, metadata !36, metadata !34), !dbg !40
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !41, metadata !34), !dbg !47
  call void @llvm.dbg.declare(metadata i32* %max_gray, metadata !48, metadata !34), !dbg !49
  call void @llvm.dbg.declare(metadata i32* %x, metadata !50, metadata !34), !dbg !51
  call void @llvm.dbg.declare(metadata i32* %y, metadata !52, metadata !34), !dbg !53
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0)), !dbg !54
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1.6, i32 0, i32 0)), !dbg !55
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2.7, i32 0, i32 0)), !dbg !56
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3.8, i32 0, i32 0)), !dbg !57
  %0 = load i8*, i8** %file_name.addr, align 8, !dbg !58
  %call4 = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4.9, i32 0, i32 0)), !dbg !59
  store %struct._IO_FILE* %call4, %struct._IO_FILE** %fp, align 8, !dbg !60
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !61
  %cmp = icmp eq %struct._IO_FILE* null, %1, !dbg !63
  br i1 %cmp, label %if.then, label %if.end, !dbg !64

if.then:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.10, i32 0, i32 0)), !dbg !65
  call void @exit(i32 1) #9, !dbg !67
  unreachable, !dbg !67

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 0, !dbg !68
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !69
  %call6 = call i8* @fgets(i8* %arraydecay, i32 256, %struct._IO_FILE* %2), !dbg !70
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i64 0, i64 0, !dbg !71
  %3 = load i8, i8* %arrayidx, align 16, !dbg !71
  %conv = sext i8 %3 to i32, !dbg !71
  %cmp7 = icmp ne i32 %conv, 80, !dbg !73
  br i1 %cmp7, label %if.then11, label %lor.lhs.false, !dbg !74

lor.lhs.false:                                    ; preds = %if.end
  %arrayidx8 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i64 0, i64 1, !dbg !75
  %4 = load i8, i8* %arrayidx8, align 1, !dbg !75
  %conv9 = sext i8 %4 to i32, !dbg !75
  %cmp10 = icmp ne i32 %conv9, 53, !dbg !76
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !77

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i32 0, i32 0)), !dbg !78
  call void @exit(i32 1) #9, !dbg !80
  unreachable, !dbg !80

if.end13:                                         ; preds = %lor.lhs.false
  store i32 0, i32* @x_size1, align 4, !dbg !81
  store i32 0, i32* @y_size1, align 4, !dbg !82
  br label %while.cond, !dbg !83

while.cond:                                       ; preds = %if.end24, %if.end13
  %5 = load i32, i32* @x_size1, align 4, !dbg !84
  %cmp14 = icmp eq i32 %5, 0, !dbg !85
  br i1 %cmp14, label %lor.end, label %lor.rhs, !dbg !86

lor.rhs:                                          ; preds = %while.cond
  %6 = load i32, i32* @y_size1, align 4, !dbg !87
  %cmp15 = icmp eq i32 %6, 0, !dbg !88
  br label %lor.end, !dbg !86

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %7 = phi i1 [ true, %while.cond ], [ %cmp15, %lor.rhs ]
  br i1 %7, label %while.body, label %while.end, !dbg !83

while.body:                                       ; preds = %lor.end
  %arraydecay16 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 0, !dbg !89
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !91
  %call17 = call i8* @fgets(i8* %arraydecay16, i32 256, %struct._IO_FILE* %8), !dbg !92
  %arrayidx18 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i64 0, i64 0, !dbg !93
  %9 = load i8, i8* %arrayidx18, align 16, !dbg !93
  %conv19 = sext i8 %9 to i32, !dbg !93
  %cmp20 = icmp ne i32 %conv19, 35, !dbg !95
  br i1 %cmp20, label %if.then21, label %if.end24, !dbg !96

if.then21:                                        ; preds = %while.body
  %arraydecay22 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 0, !dbg !97
  %call23 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32* @x_size1, i32* @y_size1) #8, !dbg !99
  br label %if.end24, !dbg !100

if.end24:                                         ; preds = %if.then21, %while.body
  br label %while.cond, !dbg !83, !llvm.loop !101

while.end:                                        ; preds = %lor.end
  store i32 0, i32* %max_gray, align 4, !dbg !103
  br label %while.cond25, !dbg !104

while.cond25:                                     ; preds = %if.end36, %while.end
  %10 = load i32, i32* %max_gray, align 4, !dbg !105
  %cmp26 = icmp eq i32 %10, 0, !dbg !106
  br i1 %cmp26, label %while.body27, label %while.end37, !dbg !104

while.body27:                                     ; preds = %while.cond25
  %arraydecay28 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 0, !dbg !107
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !109
  %call29 = call i8* @fgets(i8* %arraydecay28, i32 256, %struct._IO_FILE* %11), !dbg !110
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i64 0, i64 0, !dbg !111
  %12 = load i8, i8* %arrayidx30, align 16, !dbg !111
  %conv31 = sext i8 %12 to i32, !dbg !111
  %cmp32 = icmp ne i32 %conv31, 35, !dbg !113
  br i1 %cmp32, label %if.then33, label %if.end36, !dbg !114

if.then33:                                        ; preds = %while.body27
  %arraydecay34 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 0, !dbg !115
  %call35 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32* %max_gray) #8, !dbg !117
  br label %if.end36, !dbg !118

if.end36:                                         ; preds = %if.then33, %while.body27
  br label %while.cond25, !dbg !104, !llvm.loop !119

while.end37:                                      ; preds = %while.cond25
  %13 = load i32, i32* @x_size1, align 4, !dbg !121
  %14 = load i32, i32* @y_size1, align 4, !dbg !122
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i32 0, i32 0), i32 %13, i32 %14), !dbg !123
  %15 = load i32, i32* %max_gray, align 4, !dbg !124
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i32 0, i32 0), i32 %15), !dbg !125
  %16 = load i32, i32* @x_size1, align 4, !dbg !126
  %cmp40 = icmp sgt i32 %16, 4096, !dbg !128
  br i1 %cmp40, label %if.then43, label %lor.lhs.false41, !dbg !129

lor.lhs.false41:                                  ; preds = %while.end37
  %17 = load i32, i32* @y_size1, align 4, !dbg !130
  %cmp42 = icmp sgt i32 %17, 4096, !dbg !131
  br i1 %cmp42, label %if.then43, label %if.end46, !dbg !132

if.then43:                                        ; preds = %lor.lhs.false41, %while.end37
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i32 0, i32 0), i32 4096, i32 4096), !dbg !133
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i32 0, i32 0)), !dbg !135
  call void @exit(i32 1) #9, !dbg !136
  unreachable, !dbg !136

if.end46:                                         ; preds = %lor.lhs.false41
  %18 = load i32, i32* %max_gray, align 4, !dbg !137
  %cmp47 = icmp ne i32 %18, 255, !dbg !139
  br i1 %cmp47, label %if.then48, label %if.end50, !dbg !140

if.then48:                                        ; preds = %if.end46
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.13, i32 0, i32 0)), !dbg !141
  call void @exit(i32 1) #9, !dbg !143
  unreachable, !dbg !143

if.end50:                                         ; preds = %if.end46
  store i32 0, i32* %y, align 4, !dbg !144
  br label %for.cond, !dbg !146

for.cond:                                         ; preds = %for.inc60, %if.end50
  %19 = load i32, i32* %y, align 4, !dbg !147
  %20 = load i32, i32* @y_size1, align 4, !dbg !149
  %cmp51 = icmp slt i32 %19, %20, !dbg !150
  br i1 %cmp51, label %for.body, label %for.end62, !dbg !151

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4, !dbg !152
  br label %for.cond52, !dbg !155

for.cond52:                                       ; preds = %for.inc, %for.body
  %21 = load i32, i32* %x, align 4, !dbg !156
  %22 = load i32, i32* @x_size1, align 4, !dbg !158
  %cmp53 = icmp slt i32 %21, %22, !dbg !159
  br i1 %cmp53, label %for.body54, label %for.end, !dbg !160

for.body54:                                       ; preds = %for.cond52
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !161
  %call55 = call i32 @fgetc(%struct._IO_FILE* %23), !dbg !163
  %conv56 = trunc i32 %call55 to i8, !dbg !163
  %24 = load i32, i32* %y, align 4, !dbg !164
  %idxprom = sext i32 %24 to i64, !dbg !165
  %arrayidx57 = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image1, i64 0, i64 %idxprom, !dbg !165
  %25 = load i32, i32* %x, align 4, !dbg !166
  %idxprom58 = sext i32 %25 to i64, !dbg !165
  %arrayidx59 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx57, i64 0, i64 %idxprom58, !dbg !165
  store i8 %conv56, i8* %arrayidx59, align 1, !dbg !167
  br label %for.inc, !dbg !168

for.inc:                                          ; preds = %for.body54
  %26 = load i32, i32* %x, align 4, !dbg !169
  %inc = add nsw i32 %26, 1, !dbg !169
  store i32 %inc, i32* %x, align 4, !dbg !169
  br label %for.cond52, !dbg !170, !llvm.loop !171

for.end:                                          ; preds = %for.cond52
  br label %for.inc60, !dbg !173

for.inc60:                                        ; preds = %for.end
  %27 = load i32, i32* %y, align 4, !dbg !174
  %inc61 = add nsw i32 %27, 1, !dbg !174
  store i32 %inc61, i32* %y, align 4, !dbg !174
  br label %for.cond, !dbg !175, !llvm.loop !176

for.end62:                                        ; preds = %for.cond
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i32 0, i32 0)), !dbg !178
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2.7, i32 0, i32 0)), !dbg !179
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !180
  %call65 = call i32 @fclose(%struct._IO_FILE* %28), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #4

declare %struct._IO_FILE* @fopen(i8*, i8*) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #1

declare i32 @fgetc(%struct._IO_FILE*) #3

declare i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: noinline optnone uwtable
define void @_Z15save_image_datav() #2 !dbg !183 {
entry:
  %file_name = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8** %file_name, metadata !186, metadata !34), !dbg !188
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8** %file_name, align 8, !dbg !188
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !189, metadata !34), !dbg !190
  call void @llvm.dbg.declare(metadata i32* %x, metadata !191, metadata !34), !dbg !192
  call void @llvm.dbg.declare(metadata i32* %y, metadata !193, metadata !34), !dbg !194
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i32 0, i32 0)), !dbg !195
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.17, i32 0, i32 0)), !dbg !196
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2.7, i32 0, i32 0)), !dbg !197
  %0 = load i8*, i8** %file_name, align 8, !dbg !198
  %call3 = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0)), !dbg !199
  store %struct._IO_FILE* %call3, %struct._IO_FILE** %fp, align 8, !dbg !200
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !201
  %call4 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), %struct._IO_FILE* %1), !dbg !202
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !203
  %call5 = call i32 @fputs(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i32 0, i32 0), %struct._IO_FILE* %2), !dbg !204
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !205
  %4 = load i32, i32* @x_size2, align 4, !dbg !206
  %5 = load i32, i32* @y_size2, align 4, !dbg !207
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i32 %4, i32 %5), !dbg !208
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !209
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i32 255), !dbg !210
  store i32 0, i32* %y, align 4, !dbg !211
  br label %for.cond, !dbg !213

for.cond:                                         ; preds = %for.inc14, %entry
  %7 = load i32, i32* %y, align 4, !dbg !214
  %8 = load i32, i32* @y_size2, align 4, !dbg !216
  %cmp = icmp slt i32 %7, %8, !dbg !217
  br i1 %cmp, label %for.body, label %for.end16, !dbg !218

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4, !dbg !219
  br label %for.cond8, !dbg !222

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %x, align 4, !dbg !223
  %10 = load i32, i32* @x_size2, align 4, !dbg !225
  %cmp9 = icmp slt i32 %9, %10, !dbg !226
  br i1 %cmp9, label %for.body10, label %for.end, !dbg !227

for.body10:                                       ; preds = %for.cond8
  %11 = load i32, i32* %y, align 4, !dbg !228
  %idxprom = sext i32 %11 to i64, !dbg !230
  %arrayidx = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image2, i64 0, i64 %idxprom, !dbg !230
  %12 = load i32, i32* %x, align 4, !dbg !231
  %idxprom11 = sext i32 %12 to i64, !dbg !230
  %arrayidx12 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx, i64 0, i64 %idxprom11, !dbg !230
  %13 = load i8, i8* %arrayidx12, align 1, !dbg !230
  %conv = zext i8 %13 to i32, !dbg !232
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !233
  %call13 = call i32 @fputc(i32 %conv, %struct._IO_FILE* %14), !dbg !234
  br label %for.inc, !dbg !235

for.inc:                                          ; preds = %for.body10
  %15 = load i32, i32* %x, align 4, !dbg !236
  %inc = add nsw i32 %15, 1, !dbg !236
  store i32 %inc, i32* %x, align 4, !dbg !236
  br label %for.cond8, !dbg !237, !llvm.loop !238

for.end:                                          ; preds = %for.cond8
  br label %for.inc14, !dbg !240

for.inc14:                                        ; preds = %for.end
  %16 = load i32, i32* %y, align 4, !dbg !241
  %inc15 = add nsw i32 %16, 1, !dbg !241
  store i32 %inc15, i32* %y, align 4, !dbg !241
  br label %for.cond, !dbg !242, !llvm.loop !243

for.end16:                                        ; preds = %for.cond
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i32 0, i32 0)), !dbg !245
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2.7, i32 0, i32 0)), !dbg !246
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !247
  %call19 = call i32 @fclose(%struct._IO_FILE* %17), !dbg !248
  ret void, !dbg !249
}

declare i32 @fputs(i8*, %struct._IO_FILE*) #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare i32 @fputc(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline optnone uwtable
define void @_Z15sobel_filteringv() #2 !dbg !250 {
entry:
  %weight = alloca [3 x [3 x i32]], align 16
  %pixel_value = alloca double, align 8
  %min = alloca double, align 8
  %max = alloca double, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %xa = alloca i32, align 4
  %ya = alloca i32, align 4
  %pixel_value_app = alloca double, align 8
  call void @llvm.dbg.declare(metadata [3 x [3 x i32]]* %weight, metadata !251, metadata !34), !dbg !255
  %0 = bitcast [3 x [3 x i32]]* %weight to i8*, !dbg !255
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 36, i32 16, i1 false), !dbg !255
  %1 = bitcast i8* %0 to [3 x [3 x i32]]*, !dbg !255
  %2 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %1, i32 0, i32 0, !dbg !255
  %3 = getelementptr [3 x i32], [3 x i32]* %2, i32 0, i32 0, !dbg !255
  store i32 -1, i32* %3, !dbg !255
  %4 = getelementptr [3 x i32], [3 x i32]* %2, i32 0, i32 2, !dbg !255
  store i32 1, i32* %4, !dbg !255
  %5 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %1, i32 0, i32 1, !dbg !255
  %6 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 0, !dbg !255
  store i32 -2, i32* %6, !dbg !255
  %7 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 2, !dbg !255
  store i32 2, i32* %7, !dbg !255
  %8 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %1, i32 0, i32 2, !dbg !255
  %9 = getelementptr [3 x i32], [3 x i32]* %8, i32 0, i32 0, !dbg !255
  store i32 -1, i32* %9, !dbg !255
  %10 = getelementptr [3 x i32], [3 x i32]* %8, i32 0, i32 2, !dbg !255
  store i32 1, i32* %10, !dbg !255
  call void @llvm.dbg.declare(metadata double* %pixel_value, metadata !256, metadata !34), !dbg !258
  call void @llvm.dbg.declare(metadata double* %min, metadata !259, metadata !34), !dbg !260
  call void @llvm.dbg.declare(metadata double* %max, metadata !261, metadata !34), !dbg !262
  call void @llvm.dbg.declare(metadata i32* %x, metadata !263, metadata !34), !dbg !264
  call void @llvm.dbg.declare(metadata i32* %y, metadata !265, metadata !34), !dbg !266
  call void @llvm.dbg.declare(metadata i32* %i, metadata !267, metadata !34), !dbg !268
  call void @llvm.dbg.declare(metadata i32* %j, metadata !269, metadata !34), !dbg !270
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.24, i32 0, i32 0)), !dbg !271
  store double 0x7FEFFFFFFFFFFFFF, double* %min, align 8, !dbg !272
  store double 0xFFEFFFFFFFFFFFFF, double* %max, align 8, !dbg !273
  store i32 1, i32* %y, align 4, !dbg !274
  br label %for.cond, !dbg !276

for.cond:                                         ; preds = %for.inc32, %entry
  %11 = load i32, i32* %y, align 4, !dbg !277
  %12 = load i32, i32* @y_size1, align 4, !dbg !279
  %sub = sub nsw i32 %12, 1, !dbg !280
  %cmp = icmp slt i32 %11, %sub, !dbg !281
  br i1 %cmp, label %for.body, label %for.end34, !dbg !282

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %x, align 4, !dbg !283
  br label %for.cond1, !dbg !286

for.cond1:                                        ; preds = %for.inc29, %for.body
  %13 = load i32, i32* %x, align 4, !dbg !287
  %14 = load i32, i32* @x_size1, align 4, !dbg !289
  %sub2 = sub nsw i32 %14, 1, !dbg !290
  %cmp3 = icmp slt i32 %13, %sub2, !dbg !291
  br i1 %cmp3, label %for.body4, label %for.end31, !dbg !292

for.body4:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %pixel_value, align 8, !dbg !293
  store i32 -1, i32* %j, align 4, !dbg !295
  br label %for.cond5, !dbg !297

for.cond5:                                        ; preds = %for.inc22, %for.body4
  %15 = load i32, i32* %j, align 4, !dbg !298
  %cmp6 = icmp sle i32 %15, 1, !dbg !300
  br i1 %cmp6, label %for.body7, label %for.end24, !dbg !301

for.body7:                                        ; preds = %for.cond5
  store i32 -1, i32* %i, align 4, !dbg !302
  br label %for.cond8, !dbg !305

for.cond8:                                        ; preds = %for.inc, %for.body7
  %16 = load i32, i32* %i, align 4, !dbg !306
  %cmp9 = icmp sle i32 %16, 1, !dbg !308
  br i1 %cmp9, label %for.body10, label %for.end, !dbg !309

for.body10:                                       ; preds = %for.cond8
  %17 = load i32, i32* %j, align 4, !dbg !310
  %add = add nsw i32 %17, 1, !dbg !312
  %idxprom = sext i32 %add to i64, !dbg !313
  %arrayidx = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* %weight, i64 0, i64 %idxprom, !dbg !313
  %18 = load i32, i32* %i, align 4, !dbg !314
  %add11 = add nsw i32 %18, 1, !dbg !315
  %idxprom12 = sext i32 %add11 to i64, !dbg !313
  %arrayidx13 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx, i64 0, i64 %idxprom12, !dbg !313
  %19 = load i32, i32* %arrayidx13, align 4, !dbg !313
  %20 = load i32, i32* %y, align 4, !dbg !316
  %21 = load i32, i32* %j, align 4, !dbg !317
  %add14 = add nsw i32 %20, %21, !dbg !318
  %idxprom15 = sext i32 %add14 to i64, !dbg !319
  %arrayidx16 = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image1, i64 0, i64 %idxprom15, !dbg !319
  %22 = load i32, i32* %x, align 4, !dbg !320
  %23 = load i32, i32* %i, align 4, !dbg !321
  %add17 = add nsw i32 %22, %23, !dbg !322
  %idxprom18 = sext i32 %add17 to i64, !dbg !319
  %arrayidx19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx16, i64 0, i64 %idxprom18, !dbg !319
  %24 = load i8, i8* %arrayidx19, align 1, !dbg !319
  %conv = zext i8 %24 to i32, !dbg !323
  %mul = mul nsw i32 %19, %conv, !dbg !324
  %conv20 = sitofp i32 %mul to double, !dbg !313
  %25 = load double, double* %pixel_value, align 8, !dbg !325
  %add21 = fadd double %25, %conv20, !dbg !325
  store double %add21, double* %pixel_value, align 8, !dbg !325
  br label %for.inc, !dbg !326

for.inc:                                          ; preds = %for.body10
  %26 = load i32, i32* %i, align 4, !dbg !327
  %inc = add nsw i32 %26, 1, !dbg !327
  store i32 %inc, i32* %i, align 4, !dbg !327
  br label %for.cond8, !dbg !328, !llvm.loop !329

for.end:                                          ; preds = %for.cond8
  br label %for.inc22, !dbg !331

for.inc22:                                        ; preds = %for.end
  %27 = load i32, i32* %j, align 4, !dbg !332
  %inc23 = add nsw i32 %27, 1, !dbg !332
  store i32 %inc23, i32* %j, align 4, !dbg !332
  br label %for.cond5, !dbg !333, !llvm.loop !334

for.end24:                                        ; preds = %for.cond5
  %28 = load double, double* %pixel_value, align 8, !dbg !336
  %29 = load double, double* %min, align 8, !dbg !338
  %cmp25 = fcmp olt double %28, %29, !dbg !339
  br i1 %cmp25, label %if.then, label %if.end, !dbg !340

if.then:                                          ; preds = %for.end24
  %30 = load double, double* %pixel_value, align 8, !dbg !341
  store double %30, double* %min, align 8, !dbg !342
  br label %if.end, !dbg !343

if.end:                                           ; preds = %if.then, %for.end24
  %31 = load double, double* %pixel_value, align 8, !dbg !344
  %32 = load double, double* %max, align 8, !dbg !346
  %cmp26 = fcmp ogt double %31, %32, !dbg !347
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !348

if.then27:                                        ; preds = %if.end
  %33 = load double, double* %pixel_value, align 8, !dbg !349
  store double %33, double* %max, align 8, !dbg !350
  br label %if.end28, !dbg !351

if.end28:                                         ; preds = %if.then27, %if.end
  br label %for.inc29, !dbg !352

for.inc29:                                        ; preds = %if.end28
  %34 = load i32, i32* %x, align 4, !dbg !353
  %inc30 = add nsw i32 %34, 1, !dbg !353
  store i32 %inc30, i32* %x, align 4, !dbg !353
  br label %for.cond1, !dbg !354, !llvm.loop !355

for.end31:                                        ; preds = %for.cond1
  br label %for.inc32, !dbg !357

for.inc32:                                        ; preds = %for.end31
  %35 = load i32, i32* %y, align 4, !dbg !358
  %inc33 = add nsw i32 %35, 1, !dbg !358
  store i32 %inc33, i32* %y, align 4, !dbg !358
  br label %for.cond, !dbg !359, !llvm.loop !360

for.end34:                                        ; preds = %for.cond
  %36 = load double, double* %max, align 8, !dbg !362
  %37 = load double, double* %min, align 8, !dbg !364
  %sub35 = fsub double %36, %37, !dbg !365
  %conv36 = fptosi double %sub35 to i32, !dbg !366
  %cmp37 = icmp eq i32 %conv36, 0, !dbg !367
  br i1 %cmp37, label %if.then38, label %if.end40, !dbg !368

if.then38:                                        ; preds = %for.end34
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25, i32 0, i32 0)), !dbg !369
  call void @exit(i32 1) #9, !dbg !371
  unreachable, !dbg !371

if.end40:                                         ; preds = %for.end34
  call void @llvm.dbg.declare(metadata i32* %xa, metadata !372, metadata !34), !dbg !373
  call void @llvm.dbg.declare(metadata i32* %ya, metadata !374, metadata !34), !dbg !375
  call void @llvm.dbg.declare(metadata double* %pixel_value_app, metadata !376, metadata !34), !dbg !377
  %38 = load i32, i32* @x_size1, align 4, !dbg !378
  store i32 %38, i32* @x_size2, align 4, !dbg !379
  %39 = load i32, i32* @y_size1, align 4, !dbg !380
  store i32 %39, i32* @y_size2, align 4, !dbg !381
  store i32 0, i32* %ya, align 4, !dbg !382
  br label %for.cond41, !dbg !384

for.cond41:                                       ; preds = %for.inc54, %if.end40
  %40 = load i32, i32* %ya, align 4, !dbg !385
  %41 = load i32, i32* @y_size2, align 4, !dbg !387
  %cmp42 = icmp slt i32 %40, %41, !dbg !388
  br i1 %cmp42, label %for.body43, label %for.end56, !dbg !389

for.body43:                                       ; preds = %for.cond41
  store i32 0, i32* %xa, align 4, !dbg !390
  br label %for.cond44, !dbg !393

for.cond44:                                       ; preds = %for.inc51, %for.body43
  %42 = load i32, i32* %xa, align 4, !dbg !394
  %43 = load i32, i32* @x_size2, align 4, !dbg !396
  %cmp45 = icmp slt i32 %42, %43, !dbg !397
  br i1 %cmp45, label %for.body46, label %for.end53, !dbg !398

for.body46:                                       ; preds = %for.cond44
  %44 = load i32, i32* %ya, align 4, !dbg !399
  %idxprom47 = sext i32 %44 to i64, !dbg !401
  %arrayidx48 = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image2, i64 0, i64 %idxprom47, !dbg !401
  %45 = load i32, i32* %xa, align 4, !dbg !402
  %idxprom49 = sext i32 %45 to i64, !dbg !401
  %arrayidx50 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx48, i64 0, i64 %idxprom49, !dbg !401
  store i8 0, i8* %arrayidx50, align 1, !dbg !403
  br label %for.inc51, !dbg !404

for.inc51:                                        ; preds = %for.body46
  %46 = load i32, i32* %xa, align 4, !dbg !405
  %inc52 = add nsw i32 %46, 1, !dbg !405
  store i32 %inc52, i32* %xa, align 4, !dbg !405
  br label %for.cond44, !dbg !406, !llvm.loop !407

for.end53:                                        ; preds = %for.cond44
  br label %for.inc54, !dbg !409

for.inc54:                                        ; preds = %for.end53
  %47 = load i32, i32* %ya, align 4, !dbg !410
  %inc55 = add nsw i32 %47, 1, !dbg !410
  store i32 %inc55, i32* %ya, align 4, !dbg !410
  br label %for.cond41, !dbg !411, !llvm.loop !412

for.end56:                                        ; preds = %for.cond41
  store i32 1, i32* %ya, align 4, !dbg !414
  br label %for.cond57, !dbg !416

for.cond57:                                       ; preds = %for.inc104, %for.end56
  %48 = load i32, i32* %ya, align 4, !dbg !417
  %49 = load i32, i32* @y_size1, align 4, !dbg !419
  %sub58 = sub nsw i32 %49, 1, !dbg !420
  %cmp59 = icmp slt i32 %48, %sub58, !dbg !421
  br i1 %cmp59, label %for.body60, label %for.end106, !dbg !422

for.body60:                                       ; preds = %for.cond57
  store i32 1, i32* %xa, align 4, !dbg !423
  br label %for.cond61, !dbg !426

for.cond61:                                       ; preds = %for.inc101, %for.body60
  %50 = load i32, i32* %xa, align 4, !dbg !427
  %51 = load i32, i32* @x_size1, align 4, !dbg !429
  %sub62 = sub nsw i32 %51, 1, !dbg !430
  %cmp63 = icmp slt i32 %50, %sub62, !dbg !431
  br i1 %cmp63, label %for.body64, label %for.end103, !dbg !432

for.body64:                                       ; preds = %for.cond61
  store double 0.000000e+00, double* %pixel_value_app, align 8, !dbg !433
  store i32 -1, i32* %j, align 4, !dbg !435
  br label %for.cond65, !dbg !437

for.cond65:                                       ; preds = %for.inc90, %for.body64
  %52 = load i32, i32* %j, align 4, !dbg !438
  %cmp66 = icmp sle i32 %52, 1, !dbg !440
  br i1 %cmp66, label %for.body67, label %for.end92, !dbg !441

for.body67:                                       ; preds = %for.cond65
  store i32 -1, i32* %i, align 4, !dbg !442
  br label %for.cond68, !dbg !445

for.cond68:                                       ; preds = %for.inc87, %for.body67
  %53 = load i32, i32* %i, align 4, !dbg !446
  %cmp69 = icmp sle i32 %53, 1, !dbg !448
  br i1 %cmp69, label %for.body70, label %for.end89, !dbg !449

for.body70:                                       ; preds = %for.cond68
  %54 = load i32, i32* %j, align 4, !dbg !450
  %add71 = add nsw i32 %54, 1, !dbg !452
  %idxprom72 = sext i32 %add71 to i64, !dbg !453
  %arrayidx73 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* %weight, i64 0, i64 %idxprom72, !dbg !453
  %55 = load i32, i32* %i, align 4, !dbg !454
  %add74 = add nsw i32 %55, 1, !dbg !455
  %idxprom75 = sext i32 %add74 to i64, !dbg !453
  %arrayidx76 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx73, i64 0, i64 %idxprom75, !dbg !453
  %56 = load i32, i32* %arrayidx76, align 4, !dbg !453
  %57 = load i32, i32* %ya, align 4, !dbg !456
  %58 = load i32, i32* %j, align 4, !dbg !457
  %add77 = add nsw i32 %57, %58, !dbg !458
  %idxprom78 = sext i32 %add77 to i64, !dbg !459
  %arrayidx79 = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image1, i64 0, i64 %idxprom78, !dbg !459
  %59 = load i32, i32* %xa, align 4, !dbg !460
  %60 = load i32, i32* %i, align 4, !dbg !461
  %add80 = add nsw i32 %59, %60, !dbg !462
  %idxprom81 = sext i32 %add80 to i64, !dbg !459
  %arrayidx82 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx79, i64 0, i64 %idxprom81, !dbg !459
  %61 = load i8, i8* %arrayidx82, align 1, !dbg !459
  %conv83 = zext i8 %61 to i32, !dbg !459
  %mul84 = mul nsw i32 %56, %conv83, !dbg !463
  %conv85 = sitofp i32 %mul84 to double, !dbg !453
  %62 = load double, double* %pixel_value_app, align 8, !dbg !464
  %add86 = fadd double %62, %conv85, !dbg !464
  store double %add86, double* %pixel_value_app, align 8, !dbg !464
  br label %for.inc87, !dbg !465

for.inc87:                                        ; preds = %for.body70
  %63 = load i32, i32* %i, align 4, !dbg !466
  %inc88 = add nsw i32 %63, 1, !dbg !466
  store i32 %inc88, i32* %i, align 4, !dbg !466
  br label %for.cond68, !dbg !467, !llvm.loop !468

for.end89:                                        ; preds = %for.cond68
  br label %for.inc90, !dbg !470

for.inc90:                                        ; preds = %for.end89
  %64 = load i32, i32* %j, align 4, !dbg !471
  %inc91 = add nsw i32 %64, 1, !dbg !471
  store i32 %inc91, i32* %j, align 4, !dbg !471
  br label %for.cond65, !dbg !472, !llvm.loop !473

for.end92:                                        ; preds = %for.cond65
  %65 = load double, double* %pixel_value_app, align 8, !dbg !475
  %66 = load double, double* %min, align 8, !dbg !476
  %sub93 = fsub double %65, %66, !dbg !477
  %mul94 = fmul double 2.550000e+02, %sub93, !dbg !478
  %67 = load double, double* %max, align 8, !dbg !479
  %68 = load double, double* %min, align 8, !dbg !480
  %sub95 = fsub double %67, %68, !dbg !481
  %div = fdiv double %mul94, %sub95, !dbg !482
  store double %div, double* %pixel_value_app, align 8, !dbg !483
  %69 = load double, double* %pixel_value_app, align 8, !dbg !484
  %conv96 = fptoui double %69 to i8, !dbg !484
  %70 = load i32, i32* %ya, align 4, !dbg !485
  %idxprom97 = sext i32 %70 to i64, !dbg !486
  %arrayidx98 = getelementptr inbounds [4096 x [4096 x i8]], [4096 x [4096 x i8]]* @image2, i64 0, i64 %idxprom97, !dbg !486
  %71 = load i32, i32* %xa, align 4, !dbg !487
  %idxprom99 = sext i32 %71 to i64, !dbg !486
  %arrayidx100 = getelementptr inbounds [4096 x i8], [4096 x i8]* %arrayidx98, i64 0, i64 %idxprom99, !dbg !486
  store i8 %conv96, i8* %arrayidx100, align 1, !dbg !488
  br label %for.inc101, !dbg !489

for.inc101:                                       ; preds = %for.end92
  %72 = load i32, i32* %xa, align 4, !dbg !490
  %inc102 = add nsw i32 %72, 1, !dbg !490
  store i32 %inc102, i32* %xa, align 4, !dbg !490
  br label %for.cond61, !dbg !491, !llvm.loop !492

for.end103:                                       ; preds = %for.cond61
  br label %for.inc104, !dbg !494

for.inc104:                                       ; preds = %for.end103
  %73 = load i32, i32* %ya, align 4, !dbg !495
  %inc105 = add nsw i32 %73, 1, !dbg !495
  store i32 %inc105, i32* %ya, align 4, !dbg !495
  br label %for.cond57, !dbg !496, !llvm.loop !497

for.end106:                                       ; preds = %for.cond57
  ret void, !dbg !499
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #6

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main(i32 %argc, i8** %argv) #7 !dbg !500 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !504, metadata !34), !dbg !505
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !506, metadata !34), !dbg !507
  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !508
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 1, !dbg !508
  %1 = load i8*, i8** %arrayidx, align 8, !dbg !508
  call void @_Z15load_image_dataPKc(i8* %1), !dbg !509
  call void @_Z15sobel_filteringv(), !dbg !510
  call void @_Z15save_image_datav(), !dbg !511
  ret i32 0, !dbg !512
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.ident = !{!23, !23}
!llvm.module.flags = !{!24, !25, !26}
!llvm.dbg.cu = !{!2}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "image1", scope: !2, file: !11, line: 13, type: !12, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !8)
!3 = !DIFile(filename: "sobel/sobel.c", directory: "/home/bernard/Workspace/Project-LLVM/Bayes/ErrorInjector/apps")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!0, !9, !15, !17, !19, !21}
!9 = !DIGlobalVariableExpression(var: !10)
!10 = distinct !DIGlobalVariable(name: "image2", scope: !2, file: !11, line: 14, type: !12, isLocal: false, isDefinition: true)
!11 = !DIFile(filename: "sobel/mypgm.h", directory: "/home/bernard/Workspace/Project-LLVM/Bayes/ErrorInjector/apps")
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 134217728, elements: !13)
!13 = !{!14, !14}
!14 = !DISubrange(count: 4096)
!15 = !DIGlobalVariableExpression(var: !16)
!16 = distinct !DIGlobalVariable(name: "x_size1", scope: !2, file: !11, line: 15, type: !7, isLocal: false, isDefinition: true)
!17 = !DIGlobalVariableExpression(var: !18)
!18 = distinct !DIGlobalVariable(name: "y_size1", scope: !2, file: !11, line: 15, type: !7, isLocal: false, isDefinition: true)
!19 = !DIGlobalVariableExpression(var: !20)
!20 = distinct !DIGlobalVariable(name: "x_size2", scope: !2, file: !11, line: 16, type: !7, isLocal: false, isDefinition: true)
!21 = !DIGlobalVariableExpression(var: !22)
!22 = distinct !DIGlobalVariable(name: "y_size2", scope: !2, file: !11, line: 16, type: !7, isLocal: false, isDefinition: true)
!23 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!24 = !{i32 1, !"wchar_size", i32 4}
!25 = !{i32 2, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = distinct !DISubprogram(name: "load_image_data", linkageName: "_Z15load_image_dataPKc", scope: !11, file: !11, line: 24, type: !28, isLocal: false, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!28 = !DISubroutineType(types: !29)
!29 = !{null, !30}
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64)
!31 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !32)
!32 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!33 = !DILocalVariable(name: "file_name", arg: 1, scope: !27, file: !11, line: 24, type: !30)
!34 = !DIExpression()
!35 = !DILocation(line: 24, column: 34, scope: !27)
!36 = !DILocalVariable(name: "buffer", scope: !27, file: !11, line: 28, type: !37)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 2048, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 256)
!40 = !DILocation(line: 28, column: 8, scope: !27)
!41 = !DILocalVariable(name: "fp", scope: !27, file: !11, line: 29, type: !42)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !44, line: 48, baseType: !45)
!44 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/bernard/Workspace/Project-LLVM/Bayes/ErrorInjector/apps")
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !46, line: 241, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!46 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/bernard/Workspace/Project-LLVM/Bayes/ErrorInjector/apps")
!47 = !DILocation(line: 29, column: 9, scope: !27)
!48 = !DILocalVariable(name: "max_gray", scope: !27, file: !11, line: 30, type: !7)
!49 = !DILocation(line: 30, column: 7, scope: !27)
!50 = !DILocalVariable(name: "x", scope: !27, file: !11, line: 31, type: !7)
!51 = !DILocation(line: 31, column: 7, scope: !27)
!52 = !DILocalVariable(name: "y", scope: !27, file: !11, line: 31, type: !7)
!53 = !DILocation(line: 31, column: 10, scope: !27)
!54 = !DILocation(line: 34, column: 3, scope: !27)
!55 = !DILocation(line: 35, column: 3, scope: !27)
!56 = !DILocation(line: 36, column: 3, scope: !27)
!57 = !DILocation(line: 37, column: 3, scope: !27)
!58 = !DILocation(line: 38, column: 14, scope: !27)
!59 = !DILocation(line: 38, column: 8, scope: !27)
!60 = !DILocation(line: 38, column: 6, scope: !27)
!61 = !DILocation(line: 39, column: 15, scope: !62)
!62 = distinct !DILexicalBlock(scope: !27, file: !11, line: 39, column: 7)
!63 = !DILocation(line: 39, column: 12, scope: !62)
!64 = !DILocation(line: 39, column: 7, scope: !27)
!65 = !DILocation(line: 40, column: 5, scope: !66)
!66 = distinct !DILexicalBlock(scope: !62, file: !11, line: 39, column: 19)
!67 = !DILocation(line: 41, column: 5, scope: !66)
!68 = !DILocation(line: 44, column: 9, scope: !27)
!69 = !DILocation(line: 44, column: 33, scope: !27)
!70 = !DILocation(line: 44, column: 3, scope: !27)
!71 = !DILocation(line: 45, column: 7, scope: !72)
!72 = distinct !DILexicalBlock(scope: !27, file: !11, line: 45, column: 7)
!73 = !DILocation(line: 45, column: 17, scope: !72)
!74 = !DILocation(line: 45, column: 24, scope: !72)
!75 = !DILocation(line: 45, column: 27, scope: !72)
!76 = !DILocation(line: 45, column: 37, scope: !72)
!77 = !DILocation(line: 45, column: 7, scope: !27)
!78 = !DILocation(line: 46, column: 5, scope: !79)
!79 = distinct !DILexicalBlock(scope: !72, file: !11, line: 45, column: 45)
!80 = !DILocation(line: 47, column: 5, scope: !79)
!81 = !DILocation(line: 50, column: 11, scope: !27)
!82 = !DILocation(line: 51, column: 11, scope: !27)
!83 = !DILocation(line: 52, column: 3, scope: !27)
!84 = !DILocation(line: 52, column: 10, scope: !27)
!85 = !DILocation(line: 52, column: 18, scope: !27)
!86 = !DILocation(line: 52, column: 23, scope: !27)
!87 = !DILocation(line: 52, column: 26, scope: !27)
!88 = !DILocation(line: 52, column: 34, scope: !27)
!89 = !DILocation(line: 53, column: 11, scope: !90)
!90 = distinct !DILexicalBlock(scope: !27, file: !11, line: 52, column: 40)
!91 = !DILocation(line: 53, column: 35, scope: !90)
!92 = !DILocation(line: 53, column: 5, scope: !90)
!93 = !DILocation(line: 54, column: 9, scope: !94)
!94 = distinct !DILexicalBlock(scope: !90, file: !11, line: 54, column: 9)
!95 = !DILocation(line: 54, column: 19, scope: !94)
!96 = !DILocation(line: 54, column: 9, scope: !90)
!97 = !DILocation(line: 55, column: 14, scope: !98)
!98 = distinct !DILexicalBlock(scope: !94, file: !11, line: 54, column: 27)
!99 = !DILocation(line: 55, column: 7, scope: !98)
!100 = !DILocation(line: 56, column: 5, scope: !98)
!101 = distinct !{!101, !83, !102}
!102 = !DILocation(line: 57, column: 3, scope: !27)
!103 = !DILocation(line: 59, column: 12, scope: !27)
!104 = !DILocation(line: 60, column: 3, scope: !27)
!105 = !DILocation(line: 60, column: 10, scope: !27)
!106 = !DILocation(line: 60, column: 19, scope: !27)
!107 = !DILocation(line: 61, column: 11, scope: !108)
!108 = distinct !DILexicalBlock(scope: !27, file: !11, line: 60, column: 25)
!109 = !DILocation(line: 61, column: 35, scope: !108)
!110 = !DILocation(line: 61, column: 5, scope: !108)
!111 = !DILocation(line: 62, column: 9, scope: !112)
!112 = distinct !DILexicalBlock(scope: !108, file: !11, line: 62, column: 9)
!113 = !DILocation(line: 62, column: 19, scope: !112)
!114 = !DILocation(line: 62, column: 9, scope: !108)
!115 = !DILocation(line: 63, column: 14, scope: !116)
!116 = distinct !DILexicalBlock(scope: !112, file: !11, line: 62, column: 27)
!117 = !DILocation(line: 63, column: 7, scope: !116)
!118 = !DILocation(line: 64, column: 5, scope: !116)
!119 = distinct !{!119, !104, !120}
!120 = !DILocation(line: 65, column: 3, scope: !27)
!121 = !DILocation(line: 67, column: 58, scope: !27)
!122 = !DILocation(line: 67, column: 67, scope: !27)
!123 = !DILocation(line: 67, column: 3, scope: !27)
!124 = !DILocation(line: 68, column: 45, scope: !27)
!125 = !DILocation(line: 68, column: 3, scope: !27)
!126 = !DILocation(line: 69, column: 7, scope: !127)
!127 = distinct !DILexicalBlock(scope: !27, file: !11, line: 69, column: 7)
!128 = !DILocation(line: 69, column: 15, scope: !127)
!129 = !DILocation(line: 69, column: 31, scope: !127)
!130 = !DILocation(line: 69, column: 34, scope: !127)
!131 = !DILocation(line: 69, column: 42, scope: !127)
!132 = !DILocation(line: 69, column: 7, scope: !27)
!133 = !DILocation(line: 70, column: 5, scope: !134)
!134 = distinct !DILexicalBlock(scope: !127, file: !11, line: 69, column: 59)
!135 = !DILocation(line: 72, column: 5, scope: !134)
!136 = !DILocation(line: 73, column: 5, scope: !134)
!137 = !DILocation(line: 75, column: 7, scope: !138)
!138 = distinct !DILexicalBlock(scope: !27, file: !11, line: 75, column: 7)
!139 = !DILocation(line: 75, column: 16, scope: !138)
!140 = !DILocation(line: 75, column: 7, scope: !27)
!141 = !DILocation(line: 76, column: 5, scope: !142)
!142 = distinct !DILexicalBlock(scope: !138, file: !11, line: 75, column: 35)
!143 = !DILocation(line: 77, column: 5, scope: !142)
!144 = !DILocation(line: 80, column: 10, scope: !145)
!145 = distinct !DILexicalBlock(scope: !27, file: !11, line: 80, column: 3)
!146 = !DILocation(line: 80, column: 8, scope: !145)
!147 = !DILocation(line: 80, column: 15, scope: !148)
!148 = distinct !DILexicalBlock(scope: !145, file: !11, line: 80, column: 3)
!149 = !DILocation(line: 80, column: 19, scope: !148)
!150 = !DILocation(line: 80, column: 17, scope: !148)
!151 = !DILocation(line: 80, column: 3, scope: !145)
!152 = !DILocation(line: 81, column: 12, scope: !153)
!153 = distinct !DILexicalBlock(scope: !154, file: !11, line: 81, column: 5)
!154 = distinct !DILexicalBlock(scope: !148, file: !11, line: 80, column: 33)
!155 = !DILocation(line: 81, column: 10, scope: !153)
!156 = !DILocation(line: 81, column: 17, scope: !157)
!157 = distinct !DILexicalBlock(scope: !153, file: !11, line: 81, column: 5)
!158 = !DILocation(line: 81, column: 21, scope: !157)
!159 = !DILocation(line: 81, column: 19, scope: !157)
!160 = !DILocation(line: 81, column: 5, scope: !153)
!161 = !DILocation(line: 82, column: 43, scope: !162)
!162 = distinct !DILexicalBlock(scope: !157, file: !11, line: 81, column: 35)
!163 = !DILocation(line: 82, column: 37, scope: !162)
!164 = !DILocation(line: 82, column: 14, scope: !162)
!165 = !DILocation(line: 82, column: 7, scope: !162)
!166 = !DILocation(line: 82, column: 17, scope: !162)
!167 = !DILocation(line: 82, column: 20, scope: !162)
!168 = !DILocation(line: 83, column: 5, scope: !162)
!169 = !DILocation(line: 81, column: 31, scope: !157)
!170 = !DILocation(line: 81, column: 5, scope: !157)
!171 = distinct !{!171, !160, !172}
!172 = !DILocation(line: 83, column: 5, scope: !153)
!173 = !DILocation(line: 84, column: 3, scope: !154)
!174 = !DILocation(line: 80, column: 29, scope: !148)
!175 = !DILocation(line: 80, column: 3, scope: !148)
!176 = distinct !{!176, !151, !177}
!177 = !DILocation(line: 84, column: 3, scope: !145)
!178 = !DILocation(line: 85, column: 3, scope: !27)
!179 = !DILocation(line: 86, column: 3, scope: !27)
!180 = !DILocation(line: 87, column: 10, scope: !27)
!181 = !DILocation(line: 87, column: 3, scope: !27)
!182 = !DILocation(line: 88, column: 1, scope: !27)
!183 = distinct !DISubprogram(name: "save_image_data", linkageName: "_Z15save_image_datav", scope: !11, file: !11, line: 90, type: !184, isLocal: false, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!184 = !DISubroutineType(types: !185)
!185 = !{null}
!186 = !DILocalVariable(name: "file_name", scope: !183, file: !11, line: 94, type: !187)
!187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!188 = !DILocation(line: 94, column: 9, scope: !183)
!189 = !DILocalVariable(name: "fp", scope: !183, file: !11, line: 95, type: !42)
!190 = !DILocation(line: 95, column: 9, scope: !183)
!191 = !DILocalVariable(name: "x", scope: !183, file: !11, line: 96, type: !7)
!192 = !DILocation(line: 96, column: 7, scope: !183)
!193 = !DILocalVariable(name: "y", scope: !183, file: !11, line: 96, type: !7)
!194 = !DILocation(line: 96, column: 10, scope: !183)
!195 = !DILocation(line: 99, column: 3, scope: !183)
!196 = !DILocation(line: 100, column: 3, scope: !183)
!197 = !DILocation(line: 101, column: 3, scope: !183)
!198 = !DILocation(line: 102, column: 14, scope: !183)
!199 = !DILocation(line: 102, column: 8, scope: !183)
!200 = !DILocation(line: 102, column: 6, scope: !183)
!201 = !DILocation(line: 104, column: 17, scope: !183)
!202 = !DILocation(line: 104, column: 3, scope: !183)
!203 = !DILocation(line: 105, column: 44, scope: !183)
!204 = !DILocation(line: 105, column: 3, scope: !183)
!205 = !DILocation(line: 106, column: 11, scope: !183)
!206 = !DILocation(line: 106, column: 26, scope: !183)
!207 = !DILocation(line: 106, column: 35, scope: !183)
!208 = !DILocation(line: 106, column: 3, scope: !183)
!209 = !DILocation(line: 107, column: 11, scope: !183)
!210 = !DILocation(line: 107, column: 3, scope: !183)
!211 = !DILocation(line: 109, column: 10, scope: !212)
!212 = distinct !DILexicalBlock(scope: !183, file: !11, line: 109, column: 3)
!213 = !DILocation(line: 109, column: 8, scope: !212)
!214 = !DILocation(line: 109, column: 15, scope: !215)
!215 = distinct !DILexicalBlock(scope: !212, file: !11, line: 109, column: 3)
!216 = !DILocation(line: 109, column: 19, scope: !215)
!217 = !DILocation(line: 109, column: 17, scope: !215)
!218 = !DILocation(line: 109, column: 3, scope: !212)
!219 = !DILocation(line: 110, column: 12, scope: !220)
!220 = distinct !DILexicalBlock(scope: !221, file: !11, line: 110, column: 5)
!221 = distinct !DILexicalBlock(scope: !215, file: !11, line: 109, column: 33)
!222 = !DILocation(line: 110, column: 10, scope: !220)
!223 = !DILocation(line: 110, column: 17, scope: !224)
!224 = distinct !DILexicalBlock(scope: !220, file: !11, line: 110, column: 5)
!225 = !DILocation(line: 110, column: 21, scope: !224)
!226 = !DILocation(line: 110, column: 19, scope: !224)
!227 = !DILocation(line: 110, column: 5, scope: !220)
!228 = !DILocation(line: 111, column: 21, scope: !229)
!229 = distinct !DILexicalBlock(scope: !224, file: !11, line: 110, column: 35)
!230 = !DILocation(line: 111, column: 14, scope: !229)
!231 = !DILocation(line: 111, column: 24, scope: !229)
!232 = !DILocation(line: 111, column: 13, scope: !229)
!233 = !DILocation(line: 111, column: 29, scope: !229)
!234 = !DILocation(line: 111, column: 7, scope: !229)
!235 = !DILocation(line: 112, column: 5, scope: !229)
!236 = !DILocation(line: 110, column: 31, scope: !224)
!237 = !DILocation(line: 110, column: 5, scope: !224)
!238 = distinct !{!238, !227, !239}
!239 = !DILocation(line: 112, column: 5, scope: !220)
!240 = !DILocation(line: 113, column: 3, scope: !221)
!241 = !DILocation(line: 109, column: 29, scope: !215)
!242 = !DILocation(line: 109, column: 3, scope: !215)
!243 = distinct !{!243, !218, !244}
!244 = !DILocation(line: 113, column: 3, scope: !212)
!245 = !DILocation(line: 114, column: 3, scope: !183)
!246 = !DILocation(line: 115, column: 3, scope: !183)
!247 = !DILocation(line: 116, column: 10, scope: !183)
!248 = !DILocation(line: 116, column: 3, scope: !183)
!249 = !DILocation(line: 117, column: 1, scope: !183)
!250 = distinct !DISubprogram(name: "sobel_filtering", linkageName: "_Z15sobel_filteringv", scope: !3, file: !3, line: 8, type: !184, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!251 = !DILocalVariable(name: "weight", scope: !250, file: !3, line: 14, type: !252)
!252 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 288, elements: !253)
!253 = !{!254, !254}
!254 = !DISubrange(count: 3)
!255 = !DILocation(line: 14, column: 7, scope: !250)
!256 = !DILocalVariable(name: "pixel_value", scope: !250, file: !3, line: 17, type: !257)
!257 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!258 = !DILocation(line: 17, column: 10, scope: !250)
!259 = !DILocalVariable(name: "min", scope: !250, file: !3, line: 18, type: !257)
!260 = !DILocation(line: 18, column: 10, scope: !250)
!261 = !DILocalVariable(name: "max", scope: !250, file: !3, line: 18, type: !257)
!262 = !DILocation(line: 18, column: 15, scope: !250)
!263 = !DILocalVariable(name: "x", scope: !250, file: !3, line: 19, type: !7)
!264 = !DILocation(line: 19, column: 7, scope: !250)
!265 = !DILocalVariable(name: "y", scope: !250, file: !3, line: 19, type: !7)
!266 = !DILocation(line: 19, column: 10, scope: !250)
!267 = !DILocalVariable(name: "i", scope: !250, file: !3, line: 19, type: !7)
!268 = !DILocation(line: 19, column: 13, scope: !250)
!269 = !DILocalVariable(name: "j", scope: !250, file: !3, line: 19, type: !7)
!270 = !DILocation(line: 19, column: 16, scope: !250)
!271 = !DILocation(line: 22, column: 3, scope: !250)
!272 = !DILocation(line: 23, column: 7, scope: !250)
!273 = !DILocation(line: 24, column: 7, scope: !250)
!274 = !DILocation(line: 26, column: 10, scope: !275)
!275 = distinct !DILexicalBlock(scope: !250, file: !3, line: 26, column: 3)
!276 = !DILocation(line: 26, column: 8, scope: !275)
!277 = !DILocation(line: 26, column: 15, scope: !278)
!278 = distinct !DILexicalBlock(scope: !275, file: !3, line: 26, column: 3)
!279 = !DILocation(line: 26, column: 19, scope: !278)
!280 = !DILocation(line: 26, column: 27, scope: !278)
!281 = !DILocation(line: 26, column: 17, scope: !278)
!282 = !DILocation(line: 26, column: 3, scope: !275)
!283 = !DILocation(line: 27, column: 12, scope: !284)
!284 = distinct !DILexicalBlock(scope: !285, file: !3, line: 27, column: 5)
!285 = distinct !DILexicalBlock(scope: !278, file: !3, line: 26, column: 37)
!286 = !DILocation(line: 27, column: 10, scope: !284)
!287 = !DILocation(line: 27, column: 17, scope: !288)
!288 = distinct !DILexicalBlock(scope: !284, file: !3, line: 27, column: 5)
!289 = !DILocation(line: 27, column: 21, scope: !288)
!290 = !DILocation(line: 27, column: 29, scope: !288)
!291 = !DILocation(line: 27, column: 19, scope: !288)
!292 = !DILocation(line: 27, column: 5, scope: !284)
!293 = !DILocation(line: 28, column: 19, scope: !294)
!294 = distinct !DILexicalBlock(scope: !288, file: !3, line: 27, column: 39)
!295 = !DILocation(line: 29, column: 14, scope: !296)
!296 = distinct !DILexicalBlock(scope: !294, file: !3, line: 29, column: 7)
!297 = !DILocation(line: 29, column: 12, scope: !296)
!298 = !DILocation(line: 29, column: 20, scope: !299)
!299 = distinct !DILexicalBlock(scope: !296, file: !3, line: 29, column: 7)
!300 = !DILocation(line: 29, column: 22, scope: !299)
!301 = !DILocation(line: 29, column: 7, scope: !296)
!302 = !DILocation(line: 30, column: 13, scope: !303)
!303 = distinct !DILexicalBlock(scope: !304, file: !3, line: 30, column: 6)
!304 = distinct !DILexicalBlock(scope: !299, file: !3, line: 29, column: 33)
!305 = !DILocation(line: 30, column: 11, scope: !303)
!306 = !DILocation(line: 30, column: 19, scope: !307)
!307 = distinct !DILexicalBlock(scope: !303, file: !3, line: 30, column: 6)
!308 = !DILocation(line: 30, column: 21, scope: !307)
!309 = !DILocation(line: 30, column: 6, scope: !303)
!310 = !DILocation(line: 31, column: 30, scope: !311)
!311 = distinct !DILexicalBlock(scope: !307, file: !3, line: 30, column: 32)
!312 = !DILocation(line: 31, column: 32, scope: !311)
!313 = !DILocation(line: 31, column: 23, scope: !311)
!314 = !DILocation(line: 31, column: 37, scope: !311)
!315 = !DILocation(line: 31, column: 39, scope: !311)
!316 = !DILocation(line: 31, column: 54, scope: !311)
!317 = !DILocation(line: 31, column: 58, scope: !311)
!318 = !DILocation(line: 31, column: 56, scope: !311)
!319 = !DILocation(line: 31, column: 47, scope: !311)
!320 = !DILocation(line: 31, column: 61, scope: !311)
!321 = !DILocation(line: 31, column: 65, scope: !311)
!322 = !DILocation(line: 31, column: 63, scope: !311)
!323 = !DILocation(line: 31, column: 46, scope: !311)
!324 = !DILocation(line: 31, column: 44, scope: !311)
!325 = !DILocation(line: 31, column: 20, scope: !311)
!326 = !DILocation(line: 32, column: 6, scope: !311)
!327 = !DILocation(line: 30, column: 28, scope: !307)
!328 = !DILocation(line: 30, column: 6, scope: !307)
!329 = distinct !{!329, !309, !330}
!330 = !DILocation(line: 32, column: 6, scope: !303)
!331 = !DILocation(line: 33, column: 7, scope: !304)
!332 = !DILocation(line: 29, column: 29, scope: !299)
!333 = !DILocation(line: 29, column: 7, scope: !299)
!334 = distinct !{!334, !301, !335}
!335 = !DILocation(line: 33, column: 7, scope: !296)
!336 = !DILocation(line: 34, column: 11, scope: !337)
!337 = distinct !DILexicalBlock(scope: !294, file: !3, line: 34, column: 11)
!338 = !DILocation(line: 34, column: 25, scope: !337)
!339 = !DILocation(line: 34, column: 23, scope: !337)
!340 = !DILocation(line: 34, column: 11, scope: !294)
!341 = !DILocation(line: 34, column: 36, scope: !337)
!342 = !DILocation(line: 34, column: 34, scope: !337)
!343 = !DILocation(line: 34, column: 30, scope: !337)
!344 = !DILocation(line: 35, column: 11, scope: !345)
!345 = distinct !DILexicalBlock(scope: !294, file: !3, line: 35, column: 11)
!346 = !DILocation(line: 35, column: 25, scope: !345)
!347 = !DILocation(line: 35, column: 23, scope: !345)
!348 = !DILocation(line: 35, column: 11, scope: !294)
!349 = !DILocation(line: 35, column: 36, scope: !345)
!350 = !DILocation(line: 35, column: 34, scope: !345)
!351 = !DILocation(line: 35, column: 30, scope: !345)
!352 = !DILocation(line: 36, column: 5, scope: !294)
!353 = !DILocation(line: 27, column: 35, scope: !288)
!354 = !DILocation(line: 27, column: 5, scope: !288)
!355 = distinct !{!355, !292, !356}
!356 = !DILocation(line: 36, column: 5, scope: !284)
!357 = !DILocation(line: 37, column: 3, scope: !285)
!358 = !DILocation(line: 26, column: 33, scope: !278)
!359 = !DILocation(line: 26, column: 3, scope: !278)
!360 = distinct !{!360, !282, !361}
!361 = !DILocation(line: 37, column: 3, scope: !275)
!362 = !DILocation(line: 39, column: 13, scope: !363)
!363 = distinct !DILexicalBlock(scope: !250, file: !3, line: 39, column: 7)
!364 = !DILocation(line: 39, column: 19, scope: !363)
!365 = !DILocation(line: 39, column: 17, scope: !363)
!366 = !DILocation(line: 39, column: 12, scope: !363)
!367 = !DILocation(line: 39, column: 24, scope: !363)
!368 = !DILocation(line: 39, column: 7, scope: !250)
!369 = !DILocation(line: 40, column: 5, scope: !370)
!370 = distinct !DILexicalBlock(scope: !363, file: !3, line: 39, column: 30)
!371 = !DILocation(line: 41, column: 5, scope: !370)
!372 = !DILocalVariable(name: "xa", scope: !250, file: !3, line: 45, type: !7)
!373 = !DILocation(line: 45, column: 8, scope: !250)
!374 = !DILocalVariable(name: "ya", scope: !250, file: !3, line: 46, type: !7)
!375 = !DILocation(line: 46, column: 8, scope: !250)
!376 = !DILocalVariable(name: "pixel_value_app", scope: !250, file: !3, line: 48, type: !257)
!377 = !DILocation(line: 48, column: 11, scope: !250)
!378 = !DILocation(line: 50, column: 13, scope: !250)
!379 = !DILocation(line: 50, column: 11, scope: !250)
!380 = !DILocation(line: 51, column: 13, scope: !250)
!381 = !DILocation(line: 51, column: 11, scope: !250)
!382 = !DILocation(line: 52, column: 11, scope: !383)
!383 = distinct !DILexicalBlock(scope: !250, file: !3, line: 52, column: 3)
!384 = !DILocation(line: 52, column: 8, scope: !383)
!385 = !DILocation(line: 52, column: 17, scope: !386)
!386 = distinct !DILexicalBlock(scope: !383, file: !3, line: 52, column: 3)
!387 = !DILocation(line: 52, column: 22, scope: !386)
!388 = !DILocation(line: 52, column: 20, scope: !386)
!389 = !DILocation(line: 52, column: 3, scope: !383)
!390 = !DILocation(line: 53, column: 13, scope: !391)
!391 = distinct !DILexicalBlock(scope: !392, file: !3, line: 53, column: 5)
!392 = distinct !DILexicalBlock(scope: !386, file: !3, line: 52, column: 38)
!393 = !DILocation(line: 53, column: 10, scope: !391)
!394 = !DILocation(line: 53, column: 19, scope: !395)
!395 = distinct !DILexicalBlock(scope: !391, file: !3, line: 53, column: 5)
!396 = !DILocation(line: 53, column: 24, scope: !395)
!397 = !DILocation(line: 53, column: 22, scope: !395)
!398 = !DILocation(line: 53, column: 5, scope: !391)
!399 = !DILocation(line: 54, column: 14, scope: !400)
!400 = distinct !DILexicalBlock(scope: !395, file: !3, line: 53, column: 40)
!401 = !DILocation(line: 54, column: 7, scope: !400)
!402 = !DILocation(line: 54, column: 18, scope: !400)
!403 = !DILocation(line: 54, column: 22, scope: !400)
!404 = !DILocation(line: 55, column: 5, scope: !400)
!405 = !DILocation(line: 53, column: 36, scope: !395)
!406 = !DILocation(line: 53, column: 5, scope: !395)
!407 = distinct !{!407, !398, !408}
!408 = !DILocation(line: 55, column: 5, scope: !391)
!409 = !DILocation(line: 56, column: 3, scope: !392)
!410 = !DILocation(line: 52, column: 34, scope: !386)
!411 = !DILocation(line: 52, column: 3, scope: !386)
!412 = distinct !{!412, !389, !413}
!413 = !DILocation(line: 56, column: 3, scope: !383)
!414 = !DILocation(line: 58, column: 11, scope: !415)
!415 = distinct !DILexicalBlock(scope: !250, file: !3, line: 58, column: 3)
!416 = !DILocation(line: 58, column: 8, scope: !415)
!417 = !DILocation(line: 58, column: 17, scope: !418)
!418 = distinct !DILexicalBlock(scope: !415, file: !3, line: 58, column: 3)
!419 = !DILocation(line: 58, column: 22, scope: !418)
!420 = !DILocation(line: 58, column: 30, scope: !418)
!421 = !DILocation(line: 58, column: 20, scope: !418)
!422 = !DILocation(line: 58, column: 3, scope: !415)
!423 = !DILocation(line: 59, column: 13, scope: !424)
!424 = distinct !DILexicalBlock(scope: !425, file: !3, line: 59, column: 5)
!425 = distinct !DILexicalBlock(scope: !418, file: !3, line: 58, column: 42)
!426 = !DILocation(line: 59, column: 10, scope: !424)
!427 = !DILocation(line: 59, column: 19, scope: !428)
!428 = distinct !DILexicalBlock(scope: !424, file: !3, line: 59, column: 5)
!429 = !DILocation(line: 59, column: 24, scope: !428)
!430 = !DILocation(line: 59, column: 32, scope: !428)
!431 = !DILocation(line: 59, column: 22, scope: !428)
!432 = !DILocation(line: 59, column: 5, scope: !424)
!433 = !DILocation(line: 60, column: 23, scope: !434)
!434 = distinct !DILexicalBlock(scope: !428, file: !3, line: 59, column: 44)
!435 = !DILocation(line: 61, column: 14, scope: !436)
!436 = distinct !DILexicalBlock(scope: !434, file: !3, line: 61, column: 7)
!437 = !DILocation(line: 61, column: 12, scope: !436)
!438 = !DILocation(line: 61, column: 20, scope: !439)
!439 = distinct !DILexicalBlock(scope: !436, file: !3, line: 61, column: 7)
!440 = !DILocation(line: 61, column: 22, scope: !439)
!441 = !DILocation(line: 61, column: 7, scope: !436)
!442 = !DILocation(line: 62, column: 13, scope: !443)
!443 = distinct !DILexicalBlock(scope: !444, file: !3, line: 62, column: 6)
!444 = distinct !DILexicalBlock(scope: !439, file: !3, line: 61, column: 33)
!445 = !DILocation(line: 62, column: 11, scope: !443)
!446 = !DILocation(line: 62, column: 19, scope: !447)
!447 = distinct !DILexicalBlock(scope: !443, file: !3, line: 62, column: 6)
!448 = !DILocation(line: 62, column: 21, scope: !447)
!449 = !DILocation(line: 62, column: 6, scope: !443)
!450 = !DILocation(line: 63, column: 34, scope: !451)
!451 = distinct !DILexicalBlock(scope: !447, file: !3, line: 62, column: 32)
!452 = !DILocation(line: 63, column: 36, scope: !451)
!453 = !DILocation(line: 63, column: 27, scope: !451)
!454 = !DILocation(line: 63, column: 41, scope: !451)
!455 = !DILocation(line: 63, column: 43, scope: !451)
!456 = !DILocation(line: 63, column: 57, scope: !451)
!457 = !DILocation(line: 63, column: 62, scope: !451)
!458 = !DILocation(line: 63, column: 60, scope: !451)
!459 = !DILocation(line: 63, column: 50, scope: !451)
!460 = !DILocation(line: 63, column: 65, scope: !451)
!461 = !DILocation(line: 63, column: 70, scope: !451)
!462 = !DILocation(line: 63, column: 68, scope: !451)
!463 = !DILocation(line: 63, column: 48, scope: !451)
!464 = !DILocation(line: 63, column: 24, scope: !451)
!465 = !DILocation(line: 64, column: 6, scope: !451)
!466 = !DILocation(line: 62, column: 28, scope: !447)
!467 = !DILocation(line: 62, column: 6, scope: !447)
!468 = distinct !{!468, !449, !469}
!469 = !DILocation(line: 64, column: 6, scope: !443)
!470 = !DILocation(line: 65, column: 7, scope: !444)
!471 = !DILocation(line: 61, column: 29, scope: !439)
!472 = !DILocation(line: 61, column: 7, scope: !439)
!473 = distinct !{!473, !441, !474}
!474 = !DILocation(line: 65, column: 7, scope: !436)
!475 = !DILocation(line: 66, column: 43, scope: !434)
!476 = !DILocation(line: 66, column: 61, scope: !434)
!477 = !DILocation(line: 66, column: 59, scope: !434)
!478 = !DILocation(line: 66, column: 40, scope: !434)
!479 = !DILocation(line: 66, column: 69, scope: !434)
!480 = !DILocation(line: 66, column: 75, scope: !434)
!481 = !DILocation(line: 66, column: 73, scope: !434)
!482 = !DILocation(line: 66, column: 66, scope: !434)
!483 = !DILocation(line: 66, column: 23, scope: !434)
!484 = !DILocation(line: 67, column: 39, scope: !434)
!485 = !DILocation(line: 67, column: 14, scope: !434)
!486 = !DILocation(line: 67, column: 7, scope: !434)
!487 = !DILocation(line: 67, column: 18, scope: !434)
!488 = !DILocation(line: 67, column: 22, scope: !434)
!489 = !DILocation(line: 68, column: 5, scope: !434)
!490 = !DILocation(line: 59, column: 40, scope: !428)
!491 = !DILocation(line: 59, column: 5, scope: !428)
!492 = distinct !{!492, !432, !493}
!493 = !DILocation(line: 68, column: 5, scope: !424)
!494 = !DILocation(line: 69, column: 3, scope: !425)
!495 = !DILocation(line: 58, column: 38, scope: !418)
!496 = !DILocation(line: 58, column: 3, scope: !418)
!497 = distinct !{!497, !422, !498}
!498 = !DILocation(line: 69, column: 3, scope: !415)
!499 = !DILocation(line: 70, column: 1, scope: !250)
!500 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 72, type: !501, isLocal: false, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!501 = !DISubroutineType(types: !502)
!502 = !{!7, !7, !503}
!503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!504 = !DILocalVariable(name: "argc", arg: 1, scope: !500, file: !3, line: 72, type: !7)
!505 = !DILocation(line: 72, column: 14, scope: !500)
!506 = !DILocalVariable(name: "argv", arg: 2, scope: !500, file: !3, line: 72, type: !503)
!507 = !DILocation(line: 72, column: 33, scope: !500)
!508 = !DILocation(line: 74, column: 19, scope: !500)
!509 = !DILocation(line: 74, column: 3, scope: !500)
!510 = !DILocation(line: 76, column: 3, scope: !500)
!511 = !DILocation(line: 78, column: 3, scope: !500)
!512 = !DILocation(line: 79, column: 3, scope: !500)
